//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `CoffeMach.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package servicios;

public interface BrokerService extends com.zeroc.Ice.Object
{
    void registerServer(ServerSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    void registerClient(ClientSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    void receiveUpdate(ClientSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    void sendAlarm(AlarmaServicePrx alarmaService, com.zeroc.Ice.Current current);

    void unregisterClient(ClientSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    void unregisterServer(ServerSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    void _notify(ClientSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    void subscribe(ServerSubscriberPrx subscriber, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::servicios::BrokerService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::servicios::BrokerService";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerServer(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerSubscriberPrx iceP_subscriber;
        iceP_subscriber = ServerSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.registerServer(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerClient(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ClientSubscriberPrx iceP_subscriber;
        iceP_subscriber = ClientSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.registerClient(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_receiveUpdate(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ClientSubscriberPrx iceP_subscriber;
        iceP_subscriber = ClientSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.receiveUpdate(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendAlarm(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        AlarmaServicePrx iceP_alarmaService;
        iceP_alarmaService = AlarmaServicePrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.sendAlarm(iceP_alarmaService, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unregisterClient(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ClientSubscriberPrx iceP_subscriber;
        iceP_subscriber = ClientSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unregisterClient(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unregisterServer(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerSubscriberPrx iceP_subscriber;
        iceP_subscriber = ServerSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unregisterServer(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_notify(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ClientSubscriberPrx iceP_subscriber;
        iceP_subscriber = ClientSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj._notify(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribe(BrokerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerSubscriberPrx iceP_subscriber;
        iceP_subscriber = ServerSubscriberPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribe(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "notify",
        "receiveUpdate",
        "registerClient",
        "registerServer",
        "sendAlarm",
        "subscribe",
        "unregisterClient",
        "unregisterServer"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_notify(this, in, current);
            }
            case 5:
            {
                return _iceD_receiveUpdate(this, in, current);
            }
            case 6:
            {
                return _iceD_registerClient(this, in, current);
            }
            case 7:
            {
                return _iceD_registerServer(this, in, current);
            }
            case 8:
            {
                return _iceD_sendAlarm(this, in, current);
            }
            case 9:
            {
                return _iceD_subscribe(this, in, current);
            }
            case 10:
            {
                return _iceD_unregisterClient(this, in, current);
            }
            case 11:
            {
                return _iceD_unregisterServer(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
